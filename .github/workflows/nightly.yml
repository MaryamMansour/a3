name: Nightly builds

on:
  workflow_dispatch:
  schedule:
   - cron: 0 3 * * *

jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.check-new-commits.outputs.has-new-commits }}
    steps:
      - uses: actions/checkout@v2
      - name: Check for new commits today
        id: check-new-commits
        uses: adriangl/check-new-commits-action@v1
        with:
          seconds: 86400 # One day in seconds
  build:
    strategy:
      matrix:
       include:
          - name: Android Arm64
            os: ubuntu-latest
            cargo_make_setup: setup-android
            cargo_make_args: android-arm
            with_ndk_version: r23c
            flutter_build_args: "build apk --target-platform android-arm64"
            artifact_prefix: acter-nightly-android-arm64
            artifact_path:  app/build/app/outputs/apk/release/
            artifact_files: "app-release.apk"
          - name: Linux x64
            os: ubuntu-latest
            apt_install: ninja-build libgtk-3-dev
            cargo_make_args: desktop
            flutter_config: "--enable-linux-desktop"
            flutter_build_args: "build linux"
            artifact_prefix: acter-nightly-linux-x64
            artifact_path: app/build/linux/x64/release/bundle/
            artifact_files: lib/ data/ acter
          - name: iOS
            os: macos-latest
            with_apple_cert: true
            cargo_make_setup: setup-ios
            cargo_make_args: ios
            flutter_build_args: "build ipa --export-options-plist=ios/exportOptions_nightly_adhoc.plist"
            artifact_prefix: acter-nightly-ios
            artifact_path:  app/build/ios/ipa/
            artifact_files: "acter.ipa"
          - name: Mac OSx 
            os: macos-12
            cargo_make_args: desktop
            flutter_config: "--enable-macos-desktop"
            flutter_build_args: "build macos"
            artifact_prefix: acter-nightly-macosx
            artifact_path: app/build/macos/Build/Products/Release/
            artifact_files: "Acter.app"
          - name: Windows
            os: windows-latest
            cargo_make_args: desktop
            flutter_config: "--enable-windows-desktop"
            flutter_build_args: "build windows"
            artifact_prefix: acter-nightly-windows
            artifact_path: app/build/windows/runner/
            artifact_files: "Release"

    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - id: tag
        run: echo "tag=`date +%F`" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install supported toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
          key: ${{ runner.os }}-cargo-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Cache Rust
        uses: actions/cache@v2
        with:
          path: |
            target
          key: ${{ runner.os }}-nightly-${{matrix.artifact_prefix}}-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Install extra deps
        if: matrix.apt_install
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ matrix.apt_install }}

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: matrix.with_ndk_version
        with:
          ndk-version: ${{ matrix.with_ndk_version }}

      - name: Install cargo-make
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: davidB/rust-cargo-make@v1

      - name: Rust Setup
        if: matrix.cargo_make_setup
        run: cargo make ${{ matrix.cargo_make_setup }}

      - uses: subosito/flutter-action@v2
        name: "Set up flutter"
        with:
          channel: 'stable'

      - name: Flutter info
        run: flutter doctor -v

      - name: Flutter config
        if: matrix.flutter_config
        run: flutter config ${{ matrix.flutter_config }}

      - name: Build Rust Lib
        run: cargo make --profile release ${{ matrix.cargo_make_args}}

      - name: Ensure ffi-interface is up to date
        run: git diff --exit-code  app/packages/rust_sdk/lib/acter_flutter_sdk_ffi.dart

      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        if: matrix.with_apple_cert
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.NIGHTLY_ADHOC_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.NIGHTLY_ADHOC_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.NIGHTLY_MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.NIGHTLY_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - env:
          RAGESHAKE_URL: ${{ secrets.RAGESHAKE_URL }}
          RAGESHAKE_APP_NAME: ${{ secrets.RAGESHAKE_APP_NAME_NIGHTLY }}
        run: |
          flutter ${{ matrix.flutter_build_args }} \
            --dart-define=VERSION_NAME=Nightly+${{ steps.tag.outputs.tag }} \
            --dart-define=RAGESHAKE_URL=$RAGESHAKE_URL \
            --dart-define=RAGESHAKE_APP_NAME=$RAGESHAKE_APP_NAME \
            --dart-define=RAGESHAKE_APP_VERSION="Nightly-${{ steps.tag.outputs.tag }}/${{ matrix.name }}"
        working-directory: ./app

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() && matrix.with_apple_cert }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      - name: Package Tar file
        if: matrix.os != 'windows-latest'
        working-directory: ${{ matrix.artifact_path }}
        run: tar -cvjf "${{ matrix.artifact_prefix }}-${{ steps.tag.outputs.tag }}.tar.bz2" ${{ matrix.artifact_files }}

      - name: Package Zip file
        if: matrix.os == 'windows-latest'
        working-directory: ${{ matrix.artifact_path }}
        run: |
          7z a "${{ matrix.artifact_prefix }}-${{ steps.tag.outputs.tag }}.zip" ${{ matrix.artifact_files }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: Nightly ${{ steps.tag.outputs.tag }}
          tag_name: nightly-${{ steps.tag.outputs.tag }}
          prerelease: true
          files: |
            ${{ matrix.artifact_path }}/${{ matrix.artifact_prefix }}-${{ steps.tag.outputs.tag }}.*

      - name: Report issue
        if: ${{ failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TITLE: "${{matrix.name}} nightly build failed"
          FAILED_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}
          ARTIFACT_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          assignees: gnunicorn
          filename: .github/failure-report-template.md
          update_existing: true

  publish:
    runs-on: ubuntu-latest
    name: Publish
    if: ${{ github.event.schedule }}
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
      - id: tag
        run: echo "tag=`date +%F`" >> $GITHUB_OUTPUT
        shell: bash
      - name: Tag for nightly release
        run: |
          git tag nightly-${{ steps.tag.outputs.tag }}
          git push origin nightly-${{ steps.tag.outputs.tag }}
      - name: Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # publish this nightly release now
          draft: true
          name: Nightly ${{ steps.tag.outputs.tag }}
          tag_name: nightly-${{ steps.tag.outputs.tag }}
          prerelease: true
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
